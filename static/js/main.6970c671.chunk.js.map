{"version":3,"sources":["resources/players.png","resources/star.png","resources/balloons.gif","FileInput.js","Card.js","ShuffleButton.js","ShellGame.js","Scoreboard.js","Welcome.js","ImgDisplay.js","MemoryCard.js","MemoryCardGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FileInput","props","handleSubmit","bind","getBase64","fileInput","React","createRef","formClassName","e","this","updateImagesToProcess","target","files","length","file","reader","FileReader","readAsDataURL","onload","manageImages","result","onerror","error","errorHandler","event","preventDefault","extra","onChange","className","htmlFor","icon","faUpload","id","type","ref","multiple","accept","Component","Card","state","open","cardsStatus","generateClass","updateState","index","setState","style","transform","cardPosition","key","width","cardSize","w","height","h","onClick","alt","src","ShuffleButton","switchCardsPositions","actualIndex1","actualIndex2","index1","faArrowsAltH","index2","ShellGame","random","i","max","images","getDistinctRandom","rand1","rand2","Math","floor","console","log","setTimeout","class","map","cardsPosition","trackedPositions","faRandom","Scoreboard","hasWinner","winner","balloons","players","enteredNamed","prompt","updatePlayers","p","currentPlayer","addStarToPlayer","onContextMenu","removePlayer","onDoubleClick","removeStarFromPlayer","stars","starNum","playerPoints","push","star","generateStars","Welcome","mode","changeMode","min","value","memoryCardCapacity","changeMemoryCardCapacity","ImgDisplay","num","inProccess","removeImage","MemoryCard","size","determineSize","card","opened","matchedAnimation","MemoryCardGame","cards","forEach","element","noMatchAnimation","array","j","shuffleArray","c","currentCard","newCard","previewingCards","matchedNum","checkMatch","callbackCheckMatch","previewCard","unpreviewCard","previewCards","num1","num2","timeouts","timeout1","timeout2","lastPreview","timeout","t","clearTimeout","prevState","setWinner","cards2","updateCurrentPlayer","where","Fragment","faEye","faSync","restart","removeNoMatchAnimation","App","appPart","imagesToProcess","imagesBase64","setCardsPosition","setTrackedPositions","setCardSize","memoryCardRestarts","skins","name","background","board","button","changeCardStatus","appendCardToLists","updateGraphicPositions","addPointToPlayer","removePointFromPlayer","changeAppPart","restartMemoryCardGame","n","pop","back","m","playerIndex","splice","maxPoints","winners","getWinners","init","rows","cardNum","ceil","cardsLength","l","cardPositions","calculateCardPosition","x","y","cardfloor","cardPosition1","cardPosition2","trackedPosition","key1","Object","keys","find","key2","lastTrackedPosition","player","partNum","updateCards","newPlayerPoints","image","points","Array","fill","display","faTrophy","faChevronLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6970c671.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/players.9e556d63.png\";","module.exports = __webpack_public_path__ + \"static/media/star.18d108fc.png\";","module.exports = __webpack_public_path__ + \"static/media/balloons.d2fdbd06.gif\";","import React from 'react';\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class FileInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.getBase64 = this.getBase64.bind(this)\r\n    this.fileInput = React.createRef();\r\n    this.formClassName = this.formClassName.bind(this);\r\n  }\r\n\r\n\r\n  getBase64(e) {\r\n    this.props.updateImagesToProcess(e.target.files.length)\r\n    for (const file of e.target.files) {\r\n      let reader = new FileReader()\r\n      reader.readAsDataURL(file)\r\n      reader.onload = () => {\r\n        this.props.manageImages(reader.result)\r\n      };\r\n      reader.onerror = function (error) {\r\n        this.props.errorHandler(error)\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.getBase64(event);\r\n  }\r\n\r\n  formClassName() {\r\n    if (this.props.extra === true) {\r\n      return \"file-input extra\"\r\n    }\r\n    else {\r\n      return \"file-input\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <form onChange={this.handleSubmit} className={this.formClassName()}>\r\n          <label htmlFor=\"select-images\">\r\n            <Icon icon={faUpload}/>\r\n          </label>\r\n          <input id=\"select-images\" type=\"file\" ref={this.fileInput} multiple={true} accept=\"image/*\"/>\r\n        <br />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Card extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      open: this.props.cardsStatus\r\n    }\r\n    this.generateClass = this.generateClass.bind(this);\r\n    this.updateState = this.updateState.bind(this);\r\n  }\r\n\r\n  generateClass(index) {\r\n    if (this.state.open === true) {return `card c${index}`} else {return `card show c${index}`}\r\n    //show is show the back\r\n  }\r\n\r\n  updateState() {\r\n    this.setState({open: !this.state.open})\r\n  }\r\n\r\n\r\n  render() {\r\n    return <div className=\"card-position\" style={\r\n      {transform: `translate(${this.props.cardPosition})`}}\r\n      key={this.props.key}>\r\n    <div className={this.generateClass(this.props.index)}>\r\n    <div className={'innerCard'} style={\r\n      {width: `${this.props.cardSize.w}vw`,\r\n      height: `${this.props.cardSize.h}vw`}\r\n    }>\r\n    <div className={'back'} onClick={this.updateState}></div>\r\n    <img alt=\"card front\" className={'front'}\r\n    onClick={this.updateState}\r\n    src={this.props.src}\r\n    />\r\n    </div>\r\n    </div></div>\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowsAltH } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class ShuffleButton extends Component {\r\n\r\n  render() {return (\r\n    <span className=\"switch-button\"\r\n    onClick={() => {this.props.switchCardsPositions(this.props.actualIndex1, this.props.actualIndex2)}}>\r\n    {this.props.index1+1} <Icon icon={faArrowsAltH}/> {this.props.index2+1} </span>\r\n  )}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Card from './Card.js';\r\nimport ShuffleButton from './ShuffleButton.js';\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\nimport { faRandom } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class ShellGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n    this.random = this.random.bind(this)\r\n  }\r\n\r\n  random(i=0) {\r\n    const max = this.props.images.length;\r\n    function getDistinctRandom(rand1) {\r\n      let rand2 = Math.floor(Math.random() * max)\r\n      if (rand2 === rand1) {\r\n        return getDistinctRandom(rand1)\r\n      }\r\n      return rand2\r\n    }\r\n    if (i<10) {\r\n      console.log('hi')\r\n      let rand1 = Math.floor(Math.random() * max)\r\n      let rand2 = getDistinctRandom(rand1)\r\n      this.props.switchCardsPositions(rand1, rand2)\r\n      setTimeout(()=>this.random(i+1), 685)\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n  return <div> <div class=\"cards\"> {this.props.images.map((src, index) => { return <div key={`card${index+1}`} >\r\n  <Card\r\n    cardSize={this.props.cardSize}\r\n    cardPosition={this.props.cardsPosition[index]}\r\n    index={index}\r\n    cardsStatus={this.props.cardsStatus[index]}\r\n    src={src}/></div> }) } </div>\r\n    <div className=\"shuffle-buttons\">{this.props.images.map((src, index) => {\r\n      if (index !== 0) {\r\n        return <ShuffleButton actualIndex1={this.props.trackedPositions[index-1]}\r\n        key={`shuffle${index-1}${index}`}\r\n        index1={index-1} index2={index}\r\n        actualIndex2={this.props.trackedPositions[index]}\r\n        switchCardsPositions={this.props.switchCardsPositions}\r\n        />\r\n      }\r\n      else {\r\n        return <ShuffleButton\r\n        key={\"shuffleedges\"}\r\n        actualIndex1={this.props.trackedPositions[this.props.images.length-1]}\r\n        index1={0} index2={this.props.images.length-1}\r\n        actualIndex2={this.props.trackedPositions[0]}\r\n        switchCardsPositions={this.props.switchCardsPositions}\r\n        />\r\n      }\r\n    })}\r\n    <Icon\r\n    className=\"switch-button\"\r\n    icon={faRandom}\r\n    onClick={() => this.random()}/>\r\n    </div>\r\n    </div>\r\n  }\r\n}\r\n","import React from 'react';\r\nimport players from './resources/players.png'\r\nimport star from './resources/star.png'\r\nimport balloons from './resources/balloons.gif'\r\n\r\nfunction Scoreboard(props) {\r\n  //Add player by clicking the header Players\r\n  function handleHeaderClick() {\r\n    const enteredNamed = prompt('Please enter your name');\r\n    if (enteredNamed) {props.updatePlayers(enteredNamed)}\r\n  }\r\n\r\n  function generateStars(i) {\r\n      let stars = [];\r\n        for (let starNum = 0; starNum < props.playerPoints[i]; starNum++ ) {\r\n          stars.push (<td><img alt=\"star\" className=\"star\" src={star}/></td>)\r\n        }\r\n        return stars\r\n      }\r\n\r\n    return (<div id=\"scoreboard\">\r\n    {props.hasWinner && <div id=\"winner\">\r\n    {props.winner.map((w) => <h1 id=\"winner-msg\">{w}</h1>)}\r\n    <img alt=\"balloons\"\r\n    className=\"balloons\"\r\n    src={balloons}/></div>}\r\n    <img alt=\"players\" src={players} id=\"score-header\"\r\n    onClick={handleHeaderClick}/>\r\n    <table>\r\n    {props.players.map((p, i) => <tr className={`player ${i===props.currentPlayer && 'current-player'}`}\r\n    key={`player-${i}`}>\r\n    <td onClick={() => props.addStarToPlayer(i)}\r\n    onContextMenu={(e) => { e.preventDefault();\r\n                            props.removePlayer(); } }\r\n    onDoubleClick={() => props.removeStarFromPlayer(i)}>{p}</td>\r\n    {generateStars(i)}</tr>)}\r\n    </table>\r\n    </div>)\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Welcome extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  render() {return <div className=\"shuffle-buttons\">\r\n    <span>Choose your game:</span>\r\n    <button\r\n    className={`${this.props.mode === 1 ? \"welcome-button-pressed\" : \"welcome-button\"}`}\r\n    id=\"choose-shell-game\"\r\n    onClick={() => {this.props.changeMode(1)}}>\r\n    Shell Game\r\n    </button>\r\n    <button\r\n    className={`${this.props.mode === 2 ? \"welcome-button-pressed\" : \"welcome-button\"}`}\r\n    id=\"memory-card-game-button\"\r\n    onClick={() => {this.props.changeMode(2)}}>\r\n    Memory Card Game\r\n    </button>\r\n    {this.props.mode === 2 && <label className=\"welcome-label\"> with this # of images: <input type=\"number\"min=\"8\" value={this.props.memoryCardCapacity}\r\n    max=\"12\" onChange={(e) => this.props.changeMemoryCardCapacity(e.target.value)}></input></label>}\r\n    </div>\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ImgDisplay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    let num = 0;\r\n    if (this.props.mode === 1) {\r\n      num = 3-this.props.inProccess\r\n    }\r\n    else {\r\n      num = this.props.memoryCardCapacity-this.props.inProccess\r\n    }\r\n    return <div id=\"image-display\">\r\n    {this.props.images.map((src,index) => {return <img\r\n      className=\"dis-image\" onClick={() => {this.props.removeImage(index)}}\r\n      key={`dis-image-${index}`} src={src}/>}) }\r\n      <div className=\"dis-image-more\">Please select {num} more (Click on an image to remove it)</div>\r\n    </div>\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class MemoryCard extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {}\r\n    }\r\n\r\n  determineSize() {\r\n    if (this.props.size === 8) {\r\n      return 'big-card'}\r\n    else {return ''}\r\n  }\r\n\r\n  render() {\r\n    const size = this.determineSize()\r\n    return <div className=\"card-position\" key={`pos-${this.props.card.id}-${this.props.card.type}`}>\r\n    <div className={`memory-card ${size} ${!this.props.card.opened && 'show'}`}>\r\n    <div className={`innerCard memory-card ${size}\r\n    ${this.props.card.matchedAnimation && 'animated rubberBand'}`}\r\n      >\r\n    <div className={'back'} onClick={() => {\r\n      this.props.updateState(this.props.card)\r\n    }}></div>\r\n    <img alt=\"card front\" className={'front'}\r\n    onClick={() => {this.props.updateState(this.props.card)}}\r\n    src={this.props.src}\r\n    />\r\n    </div>\r\n    </div></div>\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport MemoryCard from './MemoryCard.js'\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\r\nimport { faEye, faSync } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class MemoryCardGame extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      let cards = [];\r\n      this.props.images.forEach((element,index) => {\r\n        // id corresponds to which image, type means which copy\r\n        cards.push({id: index, type: 1, matchedAnimation: false, noMatchAnimation: false, opened: false});\r\n        cards.push({id: index, type: 2, matchedAnimation: false, noMatchAnimation: false, opened: false});\r\n      })\r\n      function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          let j = Math.floor(Math.random() * (i + 1));\r\n          [array[j], array[i]] = [array[i], array[j]]\r\n        }\r\n      }\r\n      shuffleArray(cards);\r\n      cards.forEach((c,i) => {c.index = i})\r\n      this.state = {\r\n        cards: cards,\r\n        currentCard: false,\r\n        newCard: false,\r\n        previewingCards: true,\r\n        matchedNum: 0\r\n      }\r\n    this.checkMatch = this.checkMatch.bind(this)\r\n    this.updateState = this.updateState.bind(this)\r\n    this.callbackCheckMatch = this.callbackCheckMatch.bind(this)\r\n    this.previewCard = this.previewCard.bind(this)\r\n    this.unpreviewCard = this.unpreviewCard.bind(this)\r\n    this.previewCards = this.previewCards.bind(this)\r\n    this.num1 = 400;\r\n    this.num2 = 2400;\r\n    this.timeouts = [];\r\n    }\r\n    previewCard(index) {\r\n      this.num1 = this.num1+10\r\n      this.num2 = this.num2+10\r\n      let cards = this.state.cards;\r\n      cards[index].opened = true;\r\n      this.setState({cards:cards},\r\n          function() {\r\n            if (index<cards.length-1) {\r\n            let timeout1 = setTimeout(function() {this.previewCard(index+1)}.bind(this), this.num1)\r\n            this.timeouts.push(timeout1)\r\n           };\r\n            let timeout2 = setTimeout(function() {this.unpreviewCard(index, true)}.bind(this), this.num2)\r\n            this.timeouts.push(timeout2)\r\n          }\r\n        )}\r\n    unpreviewCard(index, lastPreview) {\r\n      let cards = this.state.cards;\r\n      cards[index].opened = false;\r\n      if (lastPreview === true) {\r\n        this.setState({cards:cards})}\r\n    }\r\n\r\n    previewCards() {\r\n      let timeout = setTimeout(function() {this.previewCard(0)}.bind(this), 270)\r\n      this.timeouts.push(timeout)\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.previewCards()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      for (const t in this.timeouts) {\r\n        clearTimeout(t) }\r\n    }\r\n\r\n    callbackCheckMatch() {\r\n      let cards = [...this.state.cards];\r\n      if (this.state.currentCard.id === this.state.newCard.id) {\r\n        //correct match\r\n        this.props.addStarToPlayer(this.props.currentPlayer)\r\n        //flicker on and off the effect for matched cards\r\n        cards[this.state.newCard.index].matchedAnimation = true;\r\n        cards[this.state.currentCard.index].matchedAnimation = true;\r\n        this.setState(prevState => {return {cards: cards, matchedNum: prevState.matchedNum+1}}, function(){\r\n        if (this.state.matchedNum === cards.length/2) {\r\n          this.props.setWinner()\r\n        }\r\n        setTimeout(function(){\r\n          let cards2 = [...this.state.cards];\r\n          cards2[this.state.newCard.index].matchedAnimation = false;\r\n          cards2[this.state.currentCard.index].matchedAnimation = false;\r\n          this.setState({cards: cards2, currentCard: false, newCard: false})}.bind(this),1100)\r\n      })\r\n      }\r\n      else {\r\n        //incorrect match\r\n        this.props.updateCurrentPlayer();\r\n        setTimeout(function(){\r\n          let cards = [...this.state.cards];\r\n          cards[this.state.newCard.index].opened = false;\r\n          cards[this.state.currentCard.index].opened = false;\r\n          this.setState({cards: cards, currentCard: false, newCard: false})}.bind(this),1400)\r\n    }\r\n  }\r\n\r\n    checkMatch(card) {\r\n        if (this.state.currentCard === false) {\r\n          // No card uncovered, now uncover first card\r\n          this.setState({currentCard: card}) }\r\n        else {\r\n          // First card was uncovered, now uncover second\r\n          this.setState({newCard: card}, this.callbackCheckMatch)\r\n\r\n      }\r\n    }\r\n\r\n    updateState(card, where) {\r\n      const index = card.index\r\n      let cards = this.state.cards;\r\n      let opened = cards[index].opened\r\n      if (!this.state.newCard && !opened) {\r\n        // Check that there aren't 2 cards uncovered already and that the card\r\n        // is not open yet\r\n        cards[index].opened = !cards[index].opened\r\n        this.setState({cards: cards}, () => {this.checkMatch(card)})\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return <React.Fragment>\r\n        <div className='shuffle-buttons'>\r\n        <Icon\r\n        className=\"switch-button\"\r\n        icon={faEye}\r\n        onClick={() => this.previewCards()}\r\n        />\r\n        <Icon\r\n        className=\"switch-button\"\r\n        icon={faSync}\r\n        onClick={() => this.props.restart()}\r\n        />\r\n        </div><div id='memory-card-game'>\r\n       {this.state.cards.map(card => {\r\n        return <MemoryCard\r\n        removeNoMatchAnimation={this.removeNoMatchAnimation}\r\n        size={this.state.cards.length/2}\r\n        card={card}\r\n        updateState={this.updateState}\r\n        key={`mc-${card.id}-${card.type}`}\r\n        src={this.props.images[card.id]}\r\n        checkMatch={this.checkMatch}\r\n        />} ) }</div></React.Fragment>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './animate.css'\nimport FileInput from './FileInput.js';\nimport ShellGame from './ShellGame.js';\nimport Scoreboard from './Scoreboard.js';\nimport Welcome from './Welcome.js';\nimport ImgDisplay from './ImgDisplay.js'\nimport MemoryCardGame from './MemoryCardGame.js'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft, faTrophy} from '@fortawesome/free-solid-svg-icons'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      appPart: 1,\n      /*\n       * 1: Select Photos / Game\n       * 2: Shell Game\n       * 3: Memory Card Game\n       */\n      mode: 1, // Mode 1 = Shell Game, Mode 2 Memory Card Game\n      error: false,\n      imagesToProcess: 0,\n      players: [],\n      playerPoints: [],\n      imagesBase64: [],\n      cardsStatus: [false, false, false],\n      //cards are originally flipped\n      cardsPosition: this.setCardsPosition(true),\n      trackedPositions: this.setTrackedPositions(true),\n      cardSize: this.setCardSize(true),\n      hasWinner: false,\n      winner: false,\n      currentPlayer: false,\n      memoryCardCapacity: 8,\n      memoryCardRestarts: 0,\n      skins: [ // to be continued\n        {\n          name: 'bluesky',\n          background: 'resources/background.jpg',\n          board: 'resources/board.jpg',\n          button: './resources/players.png',\n          star: './resources/star.png',\n        },\n        {\n          name: 'pokemon',\n          background: '',\n          board: '',\n          button: '',\n          star: ''\n        }\n      ]\n      }\n\n    this.changeCardStatus = this.changeCardStatus.bind(this);\n    this.switchCardsPositions = this.switchCardsPositions.bind(this);\n    this.appendCardToLists = this.appendCardToLists.bind(this);\n    this.updateGraphicPositions = this.updateGraphicPositions.bind(this);\n    this.manageImages = this.manageImages.bind(this);\n    this.updatePlayers = this.updatePlayers.bind(this);\n    this.addPointToPlayer = this.addPointToPlayer.bind(this);\n    this.removePointFromPlayer = this.removePointFromPlayer.bind(this);\n    this.changeAppPart = this.changeAppPart.bind(this);\n    this.setCardsPosition = this.setCardsPosition.bind(this);\n    this.setWinner = this.setWinner.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n    this.updateImagesToProcess = this.updateImagesToProcess.bind(this);\n    this.changeMemoryCardCapacity = this.changeMemoryCardCapacity.bind(this);\n    this.updateCurrentPlayer = this.updateCurrentPlayer.bind(this)\n    this.removeImage = this.removeImage.bind(this)\n    this.restartMemoryCardGame = this.restartMemoryCardGame.bind(this)\n    this.removePlayer = this.removePlayer.bind(this)\n  }\n\n  changeMemoryCardCapacity(n) {\n    this.setState({memoryCardCapacity: n})\n  }\n\n  removeImage(index) {\n    let images = this.state.imagesBase64;\n    images.pop(index);\n    this.setState({imagesBase64: images})\n  }\n\n  updateCurrentPlayer(back, restart) {\n    if (back) {\n      this.setState({currentPlayer: false})\n      return\n    }\n    if (restart) {\n      this.setState({currentPlayer: 0})\n      return\n    }\n    if (this.state.currentPlayer === false && this.state.players !== []) {\n      this.setState({currentPlayer: 0})\n    }\n    else if (this.state.currentPlayer+1 === this.state.players.length) {\n      this.setState({currentPlayer: 0})\n    }\n    else {\n      this.setState(prevState => {return {currentPlayer: prevState.currentPlayer+1}})\n    }\n  }\n\n  changeMode(m) {\n    this.setState({mode: m}, () => {\n        if (this.state.imagesBase64.length >= 3 && this.state.mode === 1) {\n          this.changeAppPart(2)\n        }\n        if (this.state.imagesBase64.length >= this.state.memoryCardCapacity && this.state.mode === 2) {\n          this.changeAppPart(3)\n        }})\n  }\n\n  removePlayer(playerIndex) {\n    this.setState(prevState => {\n      let players = prevState.players;\n      players.splice(playerIndex, 1)\n      return {\n      players: players\n    }})\n  }\n\n  setWinner() {\n    let hasWinner = !this.state.hasWinner;\n    let winner;\n    if (hasWinner === false) { winner = [] }\n    if (hasWinner === true) {\n      function getWinners(playerPoints, players) {\n        console.log(players);\n        let maxPoints;\n        function max(playerPoints) {\n          if (playerPoints.length === 0) {\n            return -1;\n          }\n\n          let max = playerPoints[0];\n\n        for (let i = 1; i < playerPoints.length; i++) {\n          if (playerPoints[i] > max) {\n            max = playerPoints[i];\n          }\n        }\n\n        return max;\n      }\n      maxPoints = max(playerPoints);\n\n      let winners = [];\n      for(let i = 0; i < playerPoints.length; i++) {\n          if (playerPoints[i] === maxPoints) {\n              winners.push(players[i]);}\n            }\n      return winners\n      }\n\n    winner = getWinners(this.state.playerPoints, this.state.players)\n  }\n    this.setState({hasWinner: hasWinner, winner: winner})\n  }\n\n  setCardSize(init) {\n    let width;\n    let height;\n    let rows = 1;\n    if (init === true) {\n      width = 23.4;\n      height = 23.4;\n    }\n    else {\n      let cardNum = this.state.imagesBase64.length;\n      if (cardNum <= 4) {\n        width = 23.4;\n        height = 23.4;\n      }\n      else {\n        rows = Math.ceil(cardNum/4)\n        width = 100/(rows*4.2);\n        height = 100/(rows*4.2);\n      }\n    }\n    return {w: width, h: height}\n  }\n\n  setTrackedPositions(init) {\n    let cardsLength = 3;\n    if (init === false) {\n      let images = this.state.imagesBase64;\n      if (images.length === 3) { return }\n      // don't init locations again on selection of 3 cards\n      cardsLength = images.length;\n    }\n    let trackedPositions = {};\n    let l;\n    for (l = 0; l < cardsLength; l++) {\n      trackedPositions[l] = l;\n    }\n    if (init === true) {return trackedPositions}\n    else {\n      this.setState({trackedPositions: trackedPositions})}\n    }\n  setCardsPosition(init) {\n    let cardsLength = 3;\n    if (init === false) {\n      let images = this.state.imagesBase64;\n      if (images.length === 3) { return }\n      // don't init locations again on selection of 3 cards.\n      //we already do this on app start.\n      cardsLength = images.length;\n    }\n    let cardPositions = [];\n    for (let l = 0; l < cardsLength; l++) {\n      cardPositions.push(this.calculateCardPosition(l, init))\n    }\n    if (init === true) {return cardPositions}\n    else {\n      this.setState({cardsPosition: cardPositions})\n    }\n    }\n  calculateCardPosition(index, init) {\n    //calculate the added card's position graphically\n    let viewWidth = 96;\n    let x;\n    let y;\n    if (init === true) {\n      x = 4 + index*32;\n      //the 4 is because if the cards is too the left its ugly.\n      y = 46.4; }\n    else {\n        let cardNum = this.state.imagesBase64.length;\n        let cardfloor = Math.ceil((index+1)/4);\n        x = 2 + ((index)-((cardfloor-1)*4))*viewWidth/4\n        if (cardNum>=4) {\n        if (cardNum===4) {\n          y= 46.4;\n        }\n        else {\n          console.log((index)-((cardfloor-1)*4))\n          if (cardfloor !== 1) {\n          y = 46.4+53.4/2*(cardfloor-1)}\n          else { y=46.4 }\n        }\n        x=x+2*Math.ceil(cardNum/4)\n        //again centering the cards cuz it's prettier this way\n      }\n    }\n    return `${x}vw, ${y}vh`\n    }\n\n  switchCardsPositions(index1, index2) {\n    let cardPosition1 = this.state.cardsPosition[index1];\n    let cardPosition2 = this.state.cardsPosition[index2];\n    let cardsPosition = [...this.state.cardsPosition];\n    cardsPosition[index1] = cardPosition2;\n    cardsPosition[index2] = cardPosition1;\n    let trackedPosition = this.state.trackedPositions;\n    const key1 = Object.keys(trackedPosition).find(key => trackedPosition[key] === index1);\n    const key2 = Object.keys(trackedPosition).find(key => trackedPosition[key] === index2);\n    trackedPosition[key2] = index1;\n    trackedPosition[key1] = index2;\n    this.setState({cardsPosition: cardsPosition, trackedPositions: trackedPosition})\n    }\n\n  changeCardStatus(i) {\n      let cardsStatus = this.state.cardsStatus;\n      cardsStatus[i] = !this.state.cardsStatus[i];\n      this.setState({cardsStatus: cardsStatus})\n    }\n\n  appendCardToLists() {\n    let trackedPositions = this.state.trackedPositions;\n    let lastTrackedPosition = Object.keys(trackedPositions).length-1;\n    trackedPositions[lastTrackedPosition] = lastTrackedPosition;\n    this.setState({\n        cardsStatus: [...this.state.cardsStatus, false],\n        cardsPosition: this.updateGraphicPositions(),\n        trackedPositions: trackedPositions\n          })\n    }\n\n  updateGraphicPositions() {\n    return this.state.cardsPosition\n    }\n\n  updatePlayers(player) {\n    //Also initiates player points\n    this.setState({players: [...this.state.players, player],\n      playerPoints: [...this.state.playerPoints, 0]})\n  }\n\n  changeAppPart(partNum) {\n    if (this.state.appPart === 3 && partNum === 1) {\n      this.setState({winner: [], hasWinner: false})\n    }\n    if (partNum === 1 || partNum === 2) {\n      this.setState({appPart: partNum},\n      function() {this.updateCards();\n      this.updateCurrentPlayer(true)}.bind(this)\n    )\n    }\n    if (partNum === 3) {\n      this.setState({appPart: partNum},\n      this.updateCurrentPlayer())\n    }\n  }\n\n  updateCards() {\n    if (this.state.appPart === 1) {\n      this.setState({imagesBase64: [],\n      cardsStatus: [false, false, false],\n      //cards are originally flipped\n      cardsPosition: this.setCardsPosition(true),\n      trackedPositions: this.setTrackedPositions(true),\n      cardSize: this.setCardSize(true)})\n    }\n    if (this.state.appPart === 2) {\n    this.setCardsPosition(false);\n    this.setTrackedPositions(false);\n    this.setState({\n      cardsStatus: this.state.imagesBase64.map((e, index) => {\n        if (this.state.cardsStatus[index]) {return this.state.cardsStatus[index]}\n        else {return false}}),\n      cardSize: this.setCardSize(false)\n        //update with the new card's flip status\n      })\n    }\n  }\n\n  addPointToPlayer(index) {\n    let playerPoints = this.state.playerPoints;\n    let newPlayerPoints = [...playerPoints];\n    newPlayerPoints[index] = newPlayerPoints[index] + 1;\n    this.setState({\n      playerPoints: newPlayerPoints\n    })\n  }\n\n  removePointFromPlayer(index) {\n    let playerPoints = this.state.playerPoints;\n    let newPlayerPoints = [...playerPoints];\n    newPlayerPoints[index] = newPlayerPoints[index] - 3;\n    this.setState({\n      playerPoints: newPlayerPoints\n    })\n  }\n\n  updateImagesToProcess(num) {\n    this.setState({imagesToProcess: this.state.imagesToProcess+num})\n  }\n\n  manageImages(image) {\n    // if (this.state.imagesBase64.length < 3) {\n    //Restrict more than 3 images - commented out\n    //this.setState({imagesBase64: })\n    this.setState({imagesBase64: [...this.state.imagesBase64, image],\n    imagesToProcess: this.state.imagesToProcess-1},\n      () => {\n        if (this.state.imagesBase64.length >= 3 && this.state.mode === 1) {\n        this.changeAppPart(2)\n      }\n      if (this.state.imagesBase64.length >= this.state.memoryCardCapacity && this.state.mode === 2) {\n        this.changeAppPart(3)\n      }\n    })\n  }\n\n  // tell the app how many images are being handled at a time\n  //for nice transition between app parts when selecting many images at once\n\n  errorHandler(error) {\n    this.setState({error: error})\n  }\n\n  restartPoints() {\n    const points = new Array(this.state.players.length).fill(0);\n    this.setState({winner: [], hasWinner: false, playerPoints: points})\n  }\n\n  restartMemoryCardGame() {\n    this.setState(prevState=> ({memoryCardRestarts: prevState.memoryCardRestarts+1}))\n  }\n\n  render() {\n    let display = []\n    if ((  this.state.imagesBase64.length+this.state.imagesToProcess < 3 && this.state.mode === 1 )\n       || ( this.state.imagesBase64.length+this.state.imagesToProcess < this.state.memoryCardCapacity && this.state.mode === 2 ))\n        {display.push(<Welcome key=\"welcome\"\n        changeMode={this.changeMode}\n        images={this.state.imagesBase64}\n        mode={this.state.mode}\n        memoryCardCapacity={this.state.memoryCardCapacity}\n        changeMemoryCardCapacity={this.changeMemoryCardCapacity}\n        />)\n        if (this.state.imagesBase64.length>0) {\n        display.push(<ImgDisplay\n        mode={this.state.mode}\n        images={this.state.imagesBase64}\n        removeImage={this.removeImage}\n        memoryCardCapacity={this.state.memoryCardCapacity}\n        inProccess={this.state.imagesBase64.length+this.state.imagesToProcess}\n        />) }\n        display.push(<div key=\"fileinput\">\n        <FileInput errorHandler={this.errorHandler}\n        manageImages={this.manageImages}\n        updateImagesToProcess={this.updateImagesToProcess}/>\n        <Icon\n        className=\"trophy-icon\"\n        icon={faTrophy}\n        onClick={() => this.setWinner()}\n        />\n        </div>)\n    }\n    if (this.state.appPart === 2) {\n      display.push(<div key=\"game\"><ShellGame\n        cardSize={this.state.cardSize}\n        cardsStatus={this.state.cardsStatus}\n        cardsPosition={this.state.cardsPosition}\n        trackedPositions={this.state.trackedPositions}\n        switchCardsPositions={this.switchCardsPositions}\n        images={this.state.imagesBase64}/>\n        <FileInput extra={true}\n        updateImagesToProcess={this.updateImagesToProcess}\n        errorHandler={this.errorHandler}\n        manageImages={this.manageImages}/>\n        <Icon\n          className=\"trophy-icon\"\n          icon={faTrophy}\n          onClick={() => this.setWinner()}\n          />\n        <Icon icon={faChevronLeft}\n        className=\"back-button\"\n        onClick={() => this.changeAppPart(1)}/></div>)\n    }\n    if (this.state.appPart === 3) {\n      display.push(<div>\n        <MemoryCardGame\n          key={`${this.state.memoryCardRestarts}-memorygame`}\n          hasWinner={this.state.hasWinner}\n          images={this.state.imagesBase64}\n          updateCurrentPlayer={this.updateCurrentPlayer}\n          addStarToPlayer={this.addPointToPlayer}\n          playerPoints={this.state.playerPoints}\n          setWinner={this.setWinner}\n          currentPlayer={this.state.currentPlayer}\n          restart={this.restartMemoryCardGame}\n        />\n        <Icon icon={faChevronLeft}\n        className=\"back-button\"\n        onClick={() => this.changeAppPart(1)}/>\n        </div>)\n    }\n    display.push(<Scoreboard key=\"scoreboard\"\n      winner={this.state.winner}\n      hasWinner={this.state.hasWinner}\n      updatePlayers={this.updatePlayers}\n      playerPoints={this.state.playerPoints}\n      addStarToPlayer={this.addPointToPlayer}\n      removeStarFromPlayer={this.removePointFromPlayer}\n      players={this.state.players}\n      currentPlayer={this.state.currentPlayer}\n      removePlayer={this.removePlayer}/>)\n    return display\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}